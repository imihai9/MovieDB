Object Oriented Programming Course
Homework - VideosDB

November 2020

Ionescu Mihai, 325CD


# Program flow:

* Main class - contains the entry point of the implementation, uses a *Data*
object to read and process the data.

* Data class 
	> fields: lists of entity classes (Actor, Show, Movie, Serial,
			  Season)

	- readData - populates above-described lists with data read from the fileio
				 package;
	- processData - instantiates Command, Query, Recommendation subclasses,
					in order to process the actions. Writes the message
					generated by these classes to arrayResult.


# Entities

* Classes: Actor, Show, Movie, Serial, Season

* Show - abstract class, extended by Movie and Serial
	   - contains abstract methods such as getAverageRating() and
	   	 hasBeenRated(), that are used in the queries.


# Actions

* Represented by 3 abstract classes (Command, Query, Recommendation) that
are extended by subclasses for each type of concrete action
(e.g. for Command - ViewCommand, RatingCommand, FavoriteCommand). 

	- execute - abstract driver-method for each action that is called from 
Data.processData method described above.

* The actions classes use streams in order to filter the lists
of requested data. The comparisons between the elements of each list is done
by using the Comparator classes implemented in the comparators/ package.
These Comparators respectively use methods from the entity classes as well
as static methods implemented in the *Utils* class.

(e.g. - ActorQuery "average"  uses Comparator CompareActorsAvgRating that uses 
		Actor getAvgRating() method to get the average actor rating;

	  - ShowQuery "most viewed" uses Comparator CompareShowsMostViewed that uses
	  	Utils.getUserStats method to get the number of users that added
	  	the current show to their favourites list).

* The Movie and Season Queries are both implemented in one class (ShowQuery)
that uses Downcasting in order to access Movie/Season methods.